syntax = "proto3";

option go_package = "dk.gtz.graphedit/protobuf/types/lsp";
option java_package = "dk.gtz.graphedit.proto";
option java_multiple_files = true;
option java_outer_classname = "LspProto";
option objc_class_prefix = "Graphedit";
option csharp_namespace = "Graphedit.Protobuf.Lsp";
option cc_enable_arenas = true;

// Language server protobuf specification.
// A language server can provide diagnostics, notifications and insights into the current progress of the server.
// A server will be fed with diffs of models, whereas the first diff will add the entire model.
service LanguageServer {
    // Get the information from the server.
    rpc GetServerInfo(Empty) returns (ServerInfo) {}

    // When a project is opened
    rpc ProjectOpened(Project) returns (Empty) {}
    // When a new model file is created (of the correct syntax)
    rpc BufferCreated(Buffer) returns (Empty) {}
    // When a file (of the associated syntax) is deleted
    rpc BufferDeleted(Buffer) returns (Empty) {}
    // Handle model diffs to the server.
    rpc HandleDiff(Diff) returns (Empty) {}

    // Open a stream of diagnostics. The server should provide the full list of diagnostics every time it changes.
    rpc GetDiagnostics(Empty) returns (stream DiagnosticsList) {}
    // Open a stream of notifications.
    rpc GetNotifications(Empty) returns (stream Notification) {}
    // Open a stream of server progress reports.
    rpc GetProgress(Empty) returns (stream ProgressReport) {}
}

message Project {
    string path = 1;
    string name = 2;
    map<string,string> metadata = 3;
    repeated string excludeFiles = 4;
}

message Buffer {
    string path = 1;
    map<string,string> metadata = 2;
    Graph graph = 3;
}

message Graph {
    string declarations = 1;
    repeated Vertex vertices = 2;
    repeated Edge edges = 3;
}

message Vertex {
    string id = 1;
    // NOTE: that this has to be an encoding, since we can't actually know what concrete edge it is at protobuf specification time.
    string jsonEncoding = 2;
}

message Edge {
    string id = 1;
    // NOTE: that this has to be an encoding, since we can't actually know what concrete edge it is at protobuf specification time.
    string jsonEncoding = 2;
}

message Diff {
    string bufferName = 1;
    string syntaxStyle = 2;
    repeated Vertex vertexDeletions = 3;
    repeated Edge edgeDeletions = 4;
    repeated Vertex vertexAdditions = 5;
    repeated Edge edgeAdditions = 6;
}

message Empty {

}

message ServerInfo {
    string name = 1;
    string semanticVersion = 2;
    string language = 3;
    repeated Capability capabilities = 4;
}

enum Capability {
    CAPABILITY_DIFFS = 0;
    CAPABILITY_DIAGNOSTICS = 1;
    CAPABILITY_NOTIFICATIONS = 2;
    CAPABILITY_PROGRESS = 3;
    CAPABILITY_RECONNECT = 4;
    CAPABILITY_ACTIONS = 5;
    CAPABILITY_DEBUGGING = 6;
    CAPABILITY_PROJECT = 7;
}

message DiagnosticsList {
    repeated Diagnostic diagnostics = 1;
}

message Diagnostic {
    Severity severity = 1;
    string modelkey = 2;
    string lintIdentifier = 3;
    string title = 4;
    string message = 5;
    string description = 6;
    repeated string affectedElements = 7;
    repeated Polygon affectedRegions = 8;
    optional Diff suggestion = 9;
}

enum Severity {
    SEVERITY_HINT = 0;
    SEVERITY_INFO = 1;
    SEVERITY_WARNING = 2;
    SEVERITY_ERROR = 3;
}

enum NotificationLevel {
    NOTIFICATION_ERROR = 0;
    NOTIFICATION_WARNING = 1;
    NOTIFICATION_INFO = 2;
    NOTIFICATION_DEBUG = 3;
    NOTIFICATION_TRACE = 4;
}

message Polygon {
    repeated Point points = 1;
}

message Point {
    int32 x = 1;
    int32 y = 2;
}

message Notification {
    NotificationLevel level = 1;
    string message = 2;
}

message ProgressReport {
    string token = 1;
    string title = 2;
    string message = 3;
    ProgressReportType type = 4;
}

enum ProgressReportType {
    PROGRESS_BEGIN = 0;
    PROGRESS_STATUS = 1;
    PROGRESS_END = 2;
    PROGRESS_END_FAIL = 3;
}
